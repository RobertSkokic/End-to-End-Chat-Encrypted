// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ctest.Models;
using ctest.Models.dboSchema;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ctest.Models
{
    public partial class Test2Context
    {
        private ITest2ContextProcedures _procedures;

        public virtual ITest2ContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Test2ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ITest2ContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class Test2ContextProcedures : ITest2ContextProcedures
    {
        private readonly Test2Context _context;

        public Test2ContextProcedures(Test2Context context)
        {
            _context = context;
        }

        public virtual async Task<int> ChatuserDeleteAsync(long? CHATUSERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ChatuserDelete] @CHATUSERID = @CHATUSERID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ChatuserGetAllResult>> ChatuserGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ChatuserGetAllResult>("EXEC @returnValue = [dbo].[ChatuserGetAll] @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ChatuserGetByChatuserIDResult>> ChatuserGetByChatuserIDAsync(long? CHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ChatuserGetByChatuserIDResult>("EXEC @returnValue = [dbo].[ChatuserGetByChatuserID] @CHATUSERID = @CHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ChatuserInsertResult>> ChatuserInsertAsync(string USERNAME, string PASSWORDHASH, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "USERNAME",
                    Size = 100,
                    Value = USERNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PASSWORDHASH",
                    Size = 510,
                    Value = PASSWORDHASH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CREATEDAT",
                    Value = CREATEDAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ChatuserInsertResult>("EXEC @returnValue = [dbo].[ChatuserInsert] @USERNAME = @USERNAME, @PASSWORDHASH = @PASSWORDHASH, @CREATEDAT = @CREATEDAT, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ChatuserUpdateAsync(long? CHATUSERID, string USERNAME, string PASSWORDHASH, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "USERNAME",
                    Size = 100,
                    Value = USERNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PASSWORDHASH",
                    Size = 510,
                    Value = PASSWORDHASH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CREATEDAT",
                    Value = CREATEDAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ChatuserUpdate] @CHATUSERID = @CHATUSERID, @USERNAME = @USERNAME, @PASSWORDHASH = @PASSWORDHASH, @CREATEDAT = @CREATEDAT, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EncryptionKeyDeleteAsync(long? ENCRYPTIONKEYID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ENCRYPTIONKEYID",
                    Value = ENCRYPTIONKEYID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EncryptionKeyDelete] @ENCRYPTIONKEYID = @ENCRYPTIONKEYID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EncryptionKeyGetAllResult>> EncryptionKeyGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EncryptionKeyGetAllResult>("EXEC @returnValue = [dbo].[EncryptionKeyGetAll] @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EncryptionKeyGetByChatuserIDResult>> EncryptionKeyGetByChatuserIDAsync(long? CHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EncryptionKeyGetByChatuserIDResult>("EXEC @returnValue = [dbo].[EncryptionKeyGetByChatuserID] @CHATUSERID = @CHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EncryptionKeyGetByEncryptionKeyIDResult>> EncryptionKeyGetByEncryptionKeyIDAsync(long? ENCRYPTIONKEYID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ENCRYPTIONKEYID",
                    Value = ENCRYPTIONKEYID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EncryptionKeyGetByEncryptionKeyIDResult>("EXEC @returnValue = [dbo].[EncryptionKeyGetByEncryptionKeyID] @ENCRYPTIONKEYID = @ENCRYPTIONKEYID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EncryptionKeyInsertResult>> EncryptionKeyInsertAsync(long? CHATUSERID, byte[] KEYVALUE, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "KEYVALUE",
                    Size = 512,
                    Value = KEYVALUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "CREATEDAT",
                    Value = CREATEDAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EncryptionKeyInsertResult>("EXEC @returnValue = [dbo].[EncryptionKeyInsert] @CHATUSERID = @CHATUSERID, @KEYVALUE = @KEYVALUE, @CREATEDAT = @CREATEDAT, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EncryptionKeyUpdateAsync(long? ENCRYPTIONKEYID, long? CHATUSERID, byte[] KEYVALUE, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ENCRYPTIONKEYID",
                    Value = ENCRYPTIONKEYID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "KEYVALUE",
                    Size = 512,
                    Value = KEYVALUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "CREATEDAT",
                    Value = CREATEDAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EncryptionKeyUpdate] @ENCRYPTIONKEYID = @ENCRYPTIONKEYID, @CHATUSERID = @CHATUSERID, @KEYVALUE = @KEYVALUE, @CREATEDAT = @CREATEDAT, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MessageDeleteAsync(long? MESSAGEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MESSAGEID",
                    Value = MESSAGEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MessageDelete] @MESSAGEID = @MESSAGEID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetAllResult>> MessageGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetAllResult>("EXEC @returnValue = [dbo].[MessageGetAll] @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetByMessageIDResult>> MessageGetByMessageIDAsync(long? MESSAGEID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MESSAGEID",
                    Value = MESSAGEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetByMessageIDResult>("EXEC @returnValue = [dbo].[MessageGetByMessageID] @MESSAGEID = @MESSAGEID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetByReceiverchatuserIDResult>> MessageGetByReceiverchatuserIDAsync(long? RECEIVERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RECEIVERCHATUSERID",
                    Value = RECEIVERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetByReceiverchatuserIDResult>("EXEC @returnValue = [dbo].[MessageGetByReceiverchatuserID] @RECEIVERCHATUSERID = @RECEIVERCHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetBySenderchatuserIDResult>> MessageGetBySenderchatuserIDAsync(long? SENDERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SENDERCHATUSERID",
                    Value = SENDERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetBySenderchatuserIDResult>("EXEC @returnValue = [dbo].[MessageGetBySenderchatuserID] @SENDERCHATUSERID = @SENDERCHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetBySenderchatuserIDReceiverchatuserIDResult>> MessageGetBySenderchatuserIDReceiverchatuserIDAsync(long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SENDERCHATUSERID",
                    Value = SENDERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RECEIVERCHATUSERID",
                    Value = RECEIVERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetBySenderchatuserIDReceiverchatuserIDResult>("EXEC @returnValue = [dbo].[MessageGetBySenderchatuserIDReceiverchatuserID] @SENDERCHATUSERID = @SENDERCHATUSERID, @RECEIVERCHATUSERID = @RECEIVERCHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageInsertResult>> MessageInsertAsync(long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, string ENCRYPTEDCONTENT, DateTime? TIMESTAMP, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SENDERCHATUSERID",
                    Value = SENDERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RECEIVERCHATUSERID",
                    Value = RECEIVERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ENCRYPTEDCONTENT",
                    Size = -1,
                    Value = ENCRYPTEDCONTENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TIMESTAMP",
                    Value = TIMESTAMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageInsertResult>("EXEC @returnValue = [dbo].[MessageInsert] @SENDERCHATUSERID = @SENDERCHATUSERID, @RECEIVERCHATUSERID = @RECEIVERCHATUSERID, @ENCRYPTEDCONTENT = @ENCRYPTEDCONTENT, @TIMESTAMP = @TIMESTAMP, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MessageUpdateAsync(long? MESSAGEID, long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, string ENCRYPTEDCONTENT, DateTime? TIMESTAMP, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MESSAGEID",
                    Value = MESSAGEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SENDERCHATUSERID",
                    Value = SENDERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RECEIVERCHATUSERID",
                    Value = RECEIVERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ENCRYPTEDCONTENT",
                    Size = -1,
                    Value = ENCRYPTEDCONTENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TIMESTAMP",
                    Value = TIMESTAMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MessageUpdate] @MESSAGEID = @MESSAGEID, @SENDERCHATUSERID = @SENDERCHATUSERID, @RECEIVERCHATUSERID = @RECEIVERCHATUSERID, @ENCRYPTEDCONTENT = @ENCRYPTEDCONTENT, @TIMESTAMP = @TIMESTAMP, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
